// src/components/DataTable.jsx
import React, { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
// ‚úÖ –¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
const getStatusClass = (status) => {
    switch (status) {
        case "Completed":
            return "text-green-700 border border-green-700 bg-green-100 dark:bg-green-900 dark:text-green-300";
        case "Pending":
            return "text-yellow-700 border border-yellow-700 bg-yellow-100 dark:bg-yellow-900 dark:text-yellow-300";
        case "Active":
            return "text-blue-700 border border-blue-700 bg-blue-100 dark:bg-blue-900 dark:text-blue-300";
        default:
            return "";
    }
};
const slugify = (text) =>
    text
        .toLowerCase()
        .trim()
        .replace(/\s+/g, "-") // –ø—Ä–æ–±–µ–ª—ã ‚Üí –¥–µ—Ñ–∏—Å—ã
        .replace(/[^\w-]+/g, ""); // —É–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã


export default function DataTable({ columns, data }) {

    const navigate = useNavigate();
    // üü¢ 1. –£–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–∏—Å–∫–∞, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const [search, setSearch] = useState("");
    const [sortKey, setSortKey] = useState(null);
    const [sortOrder, setSortOrder] = useState("asc");
    const [filterStatus, setFilterStatus] = useState("All");

    // üîç 2. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–∏–¥–∏–º—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
    const filteredData = data.filter((item) =>
        columns.some((col) =>
            String(item[col.key] || "")
                .toLowerCase()
                .includes(search.toLowerCase())
        )
    );

    // üîΩ 3. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const sortedData = [...filteredData].sort((a, b) => {
        if (!sortKey) return 0;
        const valueA = a[sortKey];
        const valueB = b[sortKey];
        if (valueA < valueB) return sortOrder === "asc" ? -1 : 1;
        if (valueA > valueB) return sortOrder === "asc" ? 1 : -1;
        return 0;
    });

    // üü° 4. –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ status ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–π
    const hasStatusColumn = columns.some((col) => col.key === "status");
    const filteredByStatus = hasStatusColumn
        ? sortedData.filter(
            (item) => filterStatus === "All" || item.status === filterStatus
        )
        : sortedData;

    // ‚öôÔ∏è 5. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const handleSort = (key) => {
        if (sortKey === key) {
            setSortOrder(sortOrder === "asc" ? "desc" : "asc");
        } else {
            setSortKey(key);
            setSortOrder("asc");
        }
    };
    // ‚úÖ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∫–ª–∏–∫—É
    const handleRowClick = (name) => {
        const slug = slugify(name);
        navigate(`/Projects/${slug}`);
    };

    return (<>{/* üîé –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
            {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
            <input
                type="text"
                placeholder="Search..."
                className="p-2 border rounded w-full sm:w-64 text-gray-800 dark:text-white dark:bg-gray-700"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
            />


            {/* üîΩ –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚Äî —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–æ–Ω–æ–∫ */}

        </div>
        <div className="overflow-x-auto">




            {/* üßæ –¢–∞–±–ª–∏—Ü–∞ */}
            <table className="min-w-full border-collapse text-white">
                <thead>
                    <tr className="bg-gray-200 dark:bg-gray-600">
                        {columns.map((col) => (
                            <th
                                key={col.key}
                                className="px-4 py-2 text-left cursor-pointer"
                                onClick={() => handleSort(col.key)}
                            >
                                {col.label}
                                {sortKey === col.key && (
                                    <span className="ml-1 text-xs fixed">
                                        {sortOrder === "asc" ? "‚ñ≤" : "‚ñº"}
                                    </span>
                                )}
                            </th>
                        ))}
                    </tr>
                </thead>
                 <tbody>
                    {filteredByStatus.map((row, idx) => (
                        <tr
                            key={idx}
                            className="border-b border-gray-300 dark:border-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 transition"
                            onClick={() => handleRowClick(row.name)} // ‚úÖ –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ
                        >
                            {columns.map((col) => (
                                <td key={col.key} className="px-4  max-h-10px py-2 text-left">
                                    {col.key === "status" ? (
                                        <span
                                            className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusClass(
                                                row[col.key]
                                            )}`}
                                        >
                                            {row[col.key]}
                                        </span>
                                    ) : (
                                        row[col.key]
                                    )}
                                </td>
                            ))}
                        </tr>
                    ))}
                </tbody>
            </table>
        </div></>
    );
}
